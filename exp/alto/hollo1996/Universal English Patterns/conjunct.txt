CONJUNCT :
	- Language.UniversalEnglish
	- "conj"
	- "conjunct"
	- DEPENDENT
	- "VP|(?:WH)?NP(?:-TMP|-ADV)?|ADJP|PP|QP|ADVP|UCP(?:-TMP|-ADV)?|S|NX|SBAR|SBARQ|SINV|SQ|JJP|NML|RRC|PCONJP"
	- tregexCompiler

	"VP|S|SBAR|SBARQ|SINV|SQ|RRC < (CC|CONJP $-- !/^(?:``|-LRB-|PRN|PP|ADVP|RB|MWE)/ $+ !/^(?:SBAR|PRN|``|''|-[LR]RB-|,|:|\\.)$/=target)"

	// This case is separated out from the previous case to
	// avoid conflicts with advcl when you have phrases such as
	// "but only because ..."
	"SBAR < (CC|CONJP $-- @SBAR $+ @SBAR=target)"

	// non-parenthetical or comma in suitable phrase with conj then adverb to left
	"VP|S|SBAR|SBARQ|SINV|SQ|RRC < (CC|CONJP $-- !/^(?:``|-LRB-|PRN|PP|ADVP|RB)/ $+ (ADVP $+ !/^(?:PRN|``|''|-[LR]RB-|,|:|\\.)$/=target))"

	// content phrase to the right of a comma or a parenthetical
	// The test at the end is to make sure that a conjunction or
	// comma etc actually show up between the target of the conj
	// dependency and the head of the phrase. Otherwise, a
	// different relationship is probably more appropriate.
	// Note that this test looks for one of two things: a
	// cc/conjp which does not have a , between it and the
	// target or a , which does not appear to the right of a
	// cc/conjp. This test eliminates things such as
	// parenthetics which come after a list, such as in the
	// sentence "to see the market go down and dump everything
	// which ..." where "go down and dump everything, which..."
	// is all in one VP node.
	"VP|S|SBAR|SBARQ|SINV|SQ=root < (CC|CONJP $-- !/^(?:``|-LRB-|PRN|PP|ADVP|RB)/) < (/^(?:PRN|``|''|-[LR]RB-|,|:|\\.)$/ $+ (/^S|SINV$|^(?:A|N|V|PP|PRP|J|W|R)/=target [$-- (CC|CONJP $-- (__ ># =root) !$++ (/^:|,$/ $++ =target)) | $-- (/^:|,$/ $-- (__ ># =root) [!$-- /^CC|CONJP$/ | $++ (=target < (/^,$/ $++ (__ ># =target)))])] ) )"

	// non-parenthetical or comma in suitable phrase with conjunction to left
	"/^(?:ADJP|JJP|PP|QP|(?:WH)?NP(?:-TMP|-ADV)?|ADVP|UCP(?:-TMP|-ADV)?|NX|NML)$/ [ < (CC|CONJP $-- !/^(?:``|-LRB-|PRN)$/ $+ !/^(?:PRN|``|''|-[LR]RB-|,|:|\\.)$/=target) | < " + ETC_PAT_target + " | < " + FW_ETC_PAT_target + "]"

	// non-parenthetical or comma in suitable phrase with conj then adverb to left
	"/^(?:ADJP|PP|(?:WH)?NP(?:-TMP|-ADV)?|ADVP|UCP(?:-TMP|-ADV)?|NX|NML)$/ < (CC|CONJP $-- !/^(?:``|-LRB-|PRN)$/ $+ (ADVP $+ !/^(?:PRN|``|''|-[LR]RB-|,|:|\\.)$/=target))"

	// content phrase to the right of a comma or a parenthetical
	"/^(?:ADJP|PP|(?:WH)?NP(?:-TMP|-ADV)?|ADVP|UCP(?:-TMP|-ADV)?|NX|NML)$/ [ < (CC|CONJP $-- !/^(?:``|-LRB-|PRN)$/) | < " + ETC_PAT + " | < " + FW_ETC_PAT + "] < (/^(?:PRN|``|''|-[LR]RB-|,|:|\\.)$/ [ $+ /^S|SINV$|^(?:A|N|V|PP|PRP|J|W|R)/=target | $+ " + ETC_PAT_target + " ] )"

	// content phrase to the left of a comma for at least NX
	"NX|NML [ < (CC|CONJP $- __) | < " + ETC_PAT + "] < (/^,$/ $- /^(?:A|N|V|PP|PRP|J|W|R|S)/=target)"

	// to take the conjunct in a preconjunct structure "either X or Y"
	// also catches some missing examples of etc as conj
	"/^(?:VP|S|SBAR|SBARQ|SINV|ADJP|PP|QP|(?:WH)?NP(?:-TMP|-ADV)?|ADVP|UCP(?:-TMP|-ADV)?|NX|NML)$/ [ < (CC $++ (CC|CONJP $+ !/^(?:PRN|``|''|-[LR]RB-|,|:|\\.)$/=target)) | <- " + ETC_PAT_target + " | <- " + FW_ETC_PAT_target + " ]"

	// transformed prepositional conjunction phrase in sentence such as
	// "Lufthansa flies from and to Serbia."
	"PCONJP < (CC $+ IN|TO=target)"

	//to get conjunctions in phrases such as "big / main" or "man / woman"
	"/.*/ < (/^(.*)$/#1%x $+ (/,/ < /\\// $+ /^(.*)$/#1%x=target))"

* The "conjunct" grammatical relation. A conjunct is the relation between
* two elements connected by a conjunction word. We treat conjunctions
* asymmetrically: The head of the relation is the first conjunct and other
* conjunctions depend on it via the <i>conj</i> relation.<p>
* <p/>
* Example: <br/>
* "Bill is big and honest" &rarr; {@code conj}(big, honest)
* <p/>
* <i>Note:</i>Modified in 2010 to exclude the case of a CC/CONJP first in its phrase: it has to conjoin things.
