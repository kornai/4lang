XCLAUSAL_COMPLEMENT :
	- Language.UniversalEnglish
	- "xcomp"
	- "xclausal complement"
	- COMPLEMENT
	- "VP|ADJP|SINV"
	- tregexCompiler

	//"VP < (S=target [ !$-- NP $-- (/^V/ < " + xcompNoObjVerbRegex + ") | $-- (/^V/ < " + xcompVerbRegex + ") ] !$- (NN < order) < (VP < TO))", // used to have !> (VP < (VB|AUX < be))
	"VP < (S=target [ !$-- NP | $-- (/^V/ < " + xcompVerbRegex + ") ] !$- (NN < order) < (VP < TO))", // used to have !> (VP < (VB|AUX < be))
	"ADJP < (S=target <, (VP <, TO))"
	"VP < (S=target !$- (NN < order) < (NP $+ NP|ADJP))"
	// to find "help sustain ...
	"VP <# (/^(?:VB|AUX)/ $+ (VP=target < VB|VBG))"
	"VP < (SBAR=target < (S !$- (NN < order) < (VP < TO))) !> (VP < (VB|AUX < be)) "
	"VP < (S=target !$- (NN < order) <: NP) > VP"
	"VP < (S=target !< VP)"
	"VP < (/^VB/ $+ (@S=target < (@ADJP < /^JJ/ ! $-- @NP|S))) $-- (/^VB/ < " + copularWordRegex + " )"
	// stop eating
	// note that we eliminate parentheticals and clauses that could match a vmod
	// the clause !$-- VBG eliminates matches such as "What are you wearing dancing tonight"
	"(VP < (S=target < (VP < VBG ) !< NP !$- (/^,$/ [$- @NP|VP | $- (@PP $-- @NP ) |$- (@ADVP $-- @NP)]) !$-- /^:$/ !$-- VBG))"
	// Detects xcomp(becoming, requirement) in "Hand-holding is becoming an investment banking job requirement"
	// Also, xcomp(becoming, problem) in "Why is Dave becoming a problem?"
	"(VP $-- (/^(?:VB|AUX)/ < " + copularWordRegex + ") < (/^VB/ < " + clausalComplementRegex + ") < NP=target)"
	"VP < (/^(?:VB|AUX)/ < " + clausalComplementRegex + ") < (NP|WHNP=target [ [ !<# (/^NN/ < " + timeWordRegex + ") !$+ NP ] | $+ NP-TMP | $+ (NP <# (/^NN/ < " + timeWordRegex + ")) ] ) " +
	// The next qualification eliminates parentheticals that
	// come after the actual dobj
	" <# (__ !$++ (NP $++ (/^[:]$/ $++ =target))) "
	// The old attr relation, used here to recover xcomp relations instead.
	"VP=vp < NP=target <(/^(?:VB|AUX)/ < " + copularWordRegex + " >># =vp) !$ (NP < EX)"
	// "Such a great idea this was" if "was" is the root, eg -makeCopulaHead
	"SINV <# (VP < (/^(?:VB|AUX)/ < " + copularWordRegex + ") $-- (NP $-- NP=target))"

	//Former acomp expression
	"VP [ < ADJP=target | ( < (/^VB/ [ ( < " + clausalComplementRegex + " $++ VP=target ) | $+ (@S=target < (@ADJP < /^JJ/ ! $-- @NP|S)) ] ) !$-- (/^VB/ < " + copularWordRegex + " )) ]"

* An open clausal complement (<i>xcomp</i>) of a VP or an ADJP is a clausal
* complement without its own subject, whose reference is determined by an
* external subject. These complements are always non-finite.
* The name <i>xcomp</i> is borrowed from Lexical-Functional Grammar.
* (Mainly "TO-clause" are recognized, but also some VBG like "stop eating")
* <p/>
* <p/>
* Examples: <br/>
* "I like to swim" &rarr;
* {@code xcomp}(like, swim) <br/>
* "I am ready to leave" &rarr;
* {@code xcomp}(ready, leave)
