interpretation sintacticTree: de.up.ling.irtg.algebra.TagTreeAlgebra
interpretation sintacticTreeOld: de.up.ling.irtg.algebra.graph.GraphAlgebra
interpretation dependencyGraph: de.up.ling.irtg.algebra.graph.GraphAlgebra

//S(NP2(DT(this),NN(item)),VP(VBZ(is)),UCP(NP3(DT(a),JJ(small),CD(one)),CC(and),VP2(ADVP(RB(easily)),VBN(missed))))

//Root -> S(SubjectPhrase,PredicativePhrase)
//PredicativePhrase -> UCP_NN_PP(VerbPhrase,UCPN)
//UCPN -> UCP(NounPhrase,Conjuction,VerbPhrase)
//SubjectPhrase -> SP(NounPhrase)

//UPPER NODES
//UPPER NODES

//The most trikky assembly of the whole system is the graph part of this step. I have to connect the VP and the NP to the S as siblings in the parser sintacticTree, but I have to connect the subject phrase as the predicatives sibling in the dependency sintacticTree.
S! -> S(SubjectPhrase,PredicativePhrase)
[sintacticTree] @(?2,?1)
[sintacticTreeOld] merge(?1,?2)
[dependencyGraph] merge(?2,?1)

//It bilds the object phrase into the predicative phrase 
PredicativePhrase -> UCP_NN_PP(VerbPhrase,UCPN)
[sintacticTree] S(*,?1,?2)
[sintacticTreeOld]f_ucpn(merge(f_cooperator(merge("(<root>/S :_ (<cooperator>) :_ (<ucpn>))", r_cooperator(?1))), r_ucpn(?2)))
[dependencyGraph]f_cooperator(merge(merge("(<root> :cop (<cooperator>))", ?2), r_cooperator(?1)))

UCPN -> UCP(NounPhrase,Conjuction,VerbPhrase)
[sintacticTree] UCP(?1,?2,?3)
[sintacticTreeOld]f_acl(merge(f_conjuction(merge(f_predicative(merge("(<root>/UCP :_ (<predicative>) :_ (<conjuction>) :_ (<acl>))", r_predicative(?1))), r_conjuction(?2))), r_acl(?3)))
[dependencyGraph]f_acl(merge(f_conjuction(merge(merge("(<root> :cc (<conjuction>) :acl (<acl>))", ?1), r_conjuction(?2))), r_acl(?3)))

SubjectPhrase -> SP(NounPhrase)
[sintacticTree] ?1
[sintacticTreeOld] f_subject(merge("(<root>/S :_ (<subject>))", r_subject(?1)))
[dependencyGraph] f_subject(merge("(<root>/predicate :nsubj (<subject>))", r_subject(?1)))




//MIDDLE NODES
//MIDDLE NODES

//VerbPhrase -> VP(AdverbPhrase,VerbNoun)
//VerbPhrase -> VP(VBZ)
//NounPhrase -> NP(Determinant,JJ,CD)
//NounPhrase -> NP(Determinant,Noun)
//NounPhrase -> NP(Noun)
//AdverbPhrase -> ADVP(RB)

//Build Noun Phrase from a single noun while boxing the word into a Noun phrase
VerbPhrase -> VP2(AdverbPhrase,VerbNoun)
[sintacticTree] VP2(?1,?2)
[sintacticTreeOld] f_verbnoun(merge(f_adverbphrase(merge("(VP<root>/VP :_ (<adverbphrase>) :_ (<verbnoun>))", r_adverbphrase(?1))), r_verbnoun(?2)))
[dependencyGraph] f_adverbphrase(merge(merge("(<root> :advmod (<adverbphrase>))", ?2), r_adverbphrase(?1)))
//Build Noun Phrase from a single noun while boxing the word into a Noun phrase
VerbPhrase -> VP(VBZ)
[sintacticTree] VP(?1)
[sintacticTreeOld] f_vbz(merge("(VP<root>/VP :_ (<vbz>))", r_vbz(?1)))
[dependencyGraph] ?1

//Build Noun Phrase from a single noun while boxing the word into a Noun phrase
NounPhrase -> NP3(Determinant,JJ,CD)
[sintacticTree] NP3(?1,?2,?3)
[sintacticTreeOld] f_cd(merge(f_jj(merge(f_determinant(merge("(NP<root>/NP :_ (<determinant>) :_ (<jj>) :_ (<cd>))", r_determinant(?1))), r_jj(?2))), r_cd(?3)))
[dependencyGraph] f_jj(merge(f_determinant(merge(merge("(<root> :amod (<jj>) :det (<determinant>))", ?3),r_determinant(?1))),r_jj(?2)))
//Build Noun Phrase from a single noun while boxing the word into a Noun phrase
NounPhrase -> NP2(Determinant,Noun)
[sintacticTree] NP2(?1,?2)
[sintacticTreeOld] f_noun(merge(f_determinant(merge("(NP<root>/NP :_ (<determinant>) :_ (<noun>))", r_determinant(?1))), r_noun(?2)))
[dependencyGraph] f_determinant(merge(merge("(<root> :det (<determinant>))", ?2),r_determinant(?1)))
//Build Noun Phrase from a single noun while boxing the word into a Noun phrase
NounPhrase -> NP(Noun)
[sintacticTree] NP(?1)
[sintacticTreeOld] f_noun(merge("(NP<root>/NP :_ (<noun>))", r_noun(?1)))
[dependencyGraph] ?1

//Build Noun Phrase from a single noun while boxing the word into a Noun phrase
AdverbPhrase -> ADVP(RB)
[sintacticTree] ADVP(?1)
[sintacticTreeOld] f_rb(merge("(ADVP<root>/ADVP :_ (<rb>))", r_rb(?1)))
[dependencyGraph] ?1


//LEAFS
//LEAFS

//Conjunction -> and
//VerbNoun -> missed
//VBZ -> is
//Determinant -> this
//Determinant -> a
//JJ -> small
//CD -> one
//Noun -> item
//RB -> easily

//Boxing and into a CC
Conjuction -> and
[sintacticTree] CC(and)
[sintacticTreeOld] "(CC<root>/CC :_ (and/and) )"
[dependencyGraph] "(and<root>/and)"

//Boxing missed into a verbnoun
VerbNoun -> missed
[sintacticTree] VBN(missed)
[sintacticTreeOld] "(VBN<root>/VBN :_ (missed/missed) )"
[dependencyGraph] "(missed<root>/missed)"

//Boxing is into a VBZ (third time verb?)
VBZ -> is
[sintacticTree] VBZ(is)
[sintacticTreeOld] "(VBZ<root>/VBZ :_ (is/is) )"
[dependencyGraph] "(is<root>/is)"

//Boxing this into a determinant
Determinant -> this
[sintacticTree] DT(this)
[sintacticTreeOld] "(DT<root>/DT :_ (this/this) )"
[dependencyGraph] "(this<root>/this)"
//Boxing a into a determinant
Determinant -> a
[sintacticTree] DT(a)
[sintacticTreeOld] "(DT<root>/DT :_ (a/a) )"
[dependencyGraph] "(a<root>/a)"

//Boxing small into a JJ
JJ -> small
[sintacticTree] JJ(small)
[sintacticTreeOld] "(JJ<root>/JJ :_ (small/small) )"
[dependencyGraph] "(small<root>/small)"

//Boxing one into a CD
CD -> one
[sintacticTree] CD(one)
[sintacticTreeOld] "(CD<root>/CD :_ (one/one) )"
[dependencyGraph] "(one<root>/one)"

//Boxing item into a noun
Noun -> item
[sintacticTree] NN(item)
[sintacticTreeOld] "(NN<root>/NN :_ (item/item) )"
[dependencyGraph] "(item<root>/item)"

//Boxing easily into a RB
RB -> easily
[sintacticTree] RB(easily)
[sintacticTreeOld] "(RB<root>/RB :_ (easily/easily) )"
[dependencyGraph] "(easily<root>/easily)"

//Boxing . into an end
end -> pont
[sintacticTree] end(pont)
[sintacticTreeOld] "(.<root>/. :_ (pont/.))"
[dependencyGraph] "(.<root>/.)"
