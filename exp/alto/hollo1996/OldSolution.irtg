interpretation tree: de.up.ling.irtg.algebra.TagTreeAlgebra
interpretation graph: de.up.ling.irtg.algebra.graph.GraphAlgebra

//from the tregex we know the type of the upper structure
S! -> root(subjectPh,predicatePh,objectPh)
[tree] 	S(?1,VP(?2,?3))
[graph] f_subj(f_vcomp(merge("(u<root> / root :root (w<vcomp>))", f_obj(merge(r_obj(?1),r_subject_obj(merge(r_obj(?3), r_vcomp(r_object_obj(?2)))))))))

//starting with the predicate we can build different phrase structure trees by making more rules for it
// It will mean a different phrase structure but the same dependency
predicatePh -> verbPhrase(V)
[tree] ?1
[graph] ?1

//In this case both subject and object are in noun phrases headed by them.
subjectPh -> nounPhrase(NP)
[tree] ?1
[graph] ?1

objectPh -> nounPhrase(NP)
[tree] ?1
[graph] ?1
				
//In both case the noun phrase contains only the noun itself				
NP -> lonlyNoun(NN)
[tree] NP(?1)
[graph] f_subj(f_obj(?1))

NN -> john
[tree] NN(john)
[graph] "(n<root> / john)"

NN -> mary
[tree] NN(mary)
[graph] "(n<root> / mary)"

//
V -> loves
[tree] V(loves)
[graph] f_obj("(u<root> / loves  :dobj (v<object>)  :nsubj (w<subject>))")

/* input: S(NP(NN(john)),VP(V(loves),NP(NN(mary)))) */